package com.theatreapp.service;
@Service
public class TheatreServiceImpl implements ITheatreService{
	
		@Autowired
		private ModelMapper mapper;

		private IMovieRepository movieRepository;

		public MovieServiceImpl(IMovieRepository movieRepository) {
			
			this.movieRepository = movieRepository;
		}

		@Override
		public void addMovie(MovieDto movieDto) {
			Movie movie = mapper.map(movieDto, Movie.class);
			movieRepository.save(movie);

		}

		@Override
		public void updateMovie(MovieDto movieDto) {
			Movie movie = mapper.map(movieDto, Movie.class);
			movieRepository.save(movie);

		}

		@Override
		public void deleteMovie(int movieId) {
			movieRepository.deleteById(movieId);
		}

		@Override
		public List<MovieDto> getAll() {
			List<Movie> movies = movieRepository.findAll();
			return movies.stream().map((movie) -> mapper.map(movie, MovieDto.class)).toList();
		}

		@Override
		public MovieDto getByMovieId(int movieId) throws MovieNotFoundException {
			Movie movie = movieRepository.findById(movieId).orElseThrow(() -> new MovieNotFoundException("invalid id"));
			MovieDto movieDto = mapper.map(movie, MovieDto.class);
			return movieDto;
		}

		@Override
		public List<MovieDto> getByMovieTitle(String movieTitle) throws MovieNotFoundException {
			List<Movie> movies = movieRepository.findByMovieTitle(movieTitle);
			if (movies.isEmpty())
				throw new MovieNotFoundException("No movie found in the specified movieTitle");
			return movies.stream().map((movie) -> mapper.map(movie, MovieDto.class)).toList();

		}

		@Override
		public List<MovieDto> getByGenres(String genres) throws MovieNotFoundException {
			List<Movie> movies = movieRepository.findByGenres(genres);
			if (movies.isEmpty())
				throw new MovieNotFoundException("No movie found in the specified genres");
			return movies.stream().map((movie) -> mapper.map(movie, MovieDto.class)).toList();
		}

		@Override
		public List<MovieDto> getByLanguages(String languages) throws MovieNotFoundException {
			List<Movie> movies = movieRepository.findByLanguages(languages);
			if (movies.isEmpty())
				throw new MovieNotFoundException("No movie found in the specified languages");
			return movies.stream().map((movie) -> mapper.map(movie, MovieDto.class)).toList();
		}
		@Override
	    public Theatre addTheatre(Theatre theatre) {
	        return repo.save(theatre);
	    }

	    @Override
	    public Theatre getTheatreById(Long id) {
	        return repo.findById(id).orElse(null);
	    }

	    @Override
	    public List<Theatre> getAllTheatres() {
	        return repo.findAll();
	    }

	    @Override
	    public List<Theatre> getTheatresByLocation(String location) {
	        return repo.findByLocation(location);
	    }

	    @Override
	    public Theatre updateTheatre(Long id, Theatre theatre) {
	        return repo.findById(id).map(existing -> {
	            existing.setName(theatre.getName());
	            existing.setLocation(theatre.getLocation());
	            return repo.save(existing);
	        }).orElse(null);
	    }

	    @Override
	    public void deleteTheatre(Long id) {
	        repo.deleteById(id);
	    }

	}

}
