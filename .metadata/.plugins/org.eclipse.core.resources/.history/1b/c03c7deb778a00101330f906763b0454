package com.moviecatalog.model;

import java.time.LocalDate;
import java.util.List;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.annotation.DateTimeFormat.ISO;

import com.fasterxml.jackson.annotation.JsonFormat;

import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinColumns;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.SequenceGenerator;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
@Data
@Entity
public class Movie {
	private String movieTitle;
	@Id
	@GeneratedValue(generator = "movie_gen", strategy = GenerationType.AUTO)
	@SequenceGenerator(name = "movie_gen", sequenceName = "movie_seq", initialValue = 1, allocationSize = 1)
	private Integer movieId;
	@JsonFormat(pattern = "yyyy-MM-dd")
	@DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
	private LocalDate localdate;

	//to save the child entity before saving parent entity
	@OneToOne(cascade = CascadeType.ALL)
	//to give different name for foreign key
	@JoinColumn(name = "features_id")
	private Features features;

	@OneToMany(cascade = CascadeType.ALL,fetch = FetchType.EAGER)
	//to add foreign key in review table
	@JoinColumn(name = "movie_id")
	private List<Reviews> reviews;

	@ManyToOne
	@JoinColumn(name = "director_id")
	private Director director;

	@ManyToMany
	@JoinTable(name = "Movie_Theatre", joinColumns = @JoinColumn(name = "movie_id"), 
	inverseJoinColumns = @JoinColumn(name = "theatre_id"))
	private List<Theatre> theaters;
	
	@ElementCollection
	@CollectionTable(name="language",joinColumns=@JoinColumn(name="movie_id"))
	private List<String> languages;//Tamil,Telugu,Hindi
		
	
	@ElementCollection
	@CollectionTable(name="genre",joinColumns = @JoinColumn(name="movie_id"))
	private List<String> genres;
	
	@ElementCollection
	@CollectionTable(name="format",joinColumns = @JoinColumn(name="movie_id"))
	private List<String> formats;